////
Note: this file (changelog-2.adoc-include) is generated automatically.
Do not make manual changes in this file, as they will be lost.

If you want to add changelog entries, create a new file in changelog/src/changelog/entries/... and run creation of the changelog with
mvn -pl changelog install
////

[[v2.0.6]]
== 2.0.6 (04.10.2023)

icon:check[] Core: More NPE occurrences during the massive concurrent publishing process have been fixes.

[[v2.0.5]]
== 2.0.5 (20.09.2023)

icon:check[] Core: When running in the massive concurrent publishing process, it is possible to run into a race condition when some field containers are already processed while being referenced by the edge, 
throwing an NPE. This has now been fixed.


[[v2.0.4]]
== 2.0.4 (05.09.2023)

icon:check[] Mesh Rest Client: An error has been fixed, which prevented sorting parameters from being passed to the endpoint.


icon:check[] Clustering: Calling cluster specific REST Endpoints on non-clustered instances could cause internal server errors. The behaviour has been changed so that
a "Bad Request" error is returned containing a proper error message.


icon:check[] Java Rest Client: After logging in with the `login()` method, the login token was never refreshed, which caused it to expire after the configured token expiration time (per default 1 hour),
even if the client was used to do requests. This has been changed now, so that the login token in the client will be refreshed on every request to mesh.


icon:check[] GraphQL: Link resolving in graphql queries ignored the language tags in the links. This has been fixed.


icon:check[] GraphQL: The metadata request does not crash anymore on the empty (micro)schemas. The new related filter, `isEmpty`, has been added as well.


[[v2.0.3]]
== 2.0.3 (10.08.2023)

icon:check[] Java filter for Node reference content field has been fixed. Native filtering pagination has been improved. Some other minor stability fixed applied.

icon:check[] Plugins: Logging fixed upon false triggering of a warning of inexisting role/group connection.


icon:check[] Core: All named instances have been presented an own cache.


[[v2.0.2]]
== 2.0.2 (26.07.2023)

icon:check[] Core: Uniqueness checks for webroot url field values will now only be done, if those values actually change. This will improve performance of e.g. schema migrations, where the webroot url field values are likely to not change.


icon:check[] Core: An internal API for efficient loading of list field values has been added.


[[v2.0.1]]
== 2.0.1 (13.07.2023)

icon:check[] Clustering: Due to an incorrect check, it was possible that migration jobs could complete without actually migrating anything, when run in a clustered environment with disabled coordination mode.

[[v2.0.0]]
== 2.0.0 (29.06.2023)

icon:plus[] Core: Support of database level filtering/sorting has been added to the low level Java API.

icon:plus[] GraphQL: Support of database level filtering/sorting has been added. New `sort` parameter in added for structured sorting, forcing the usage of DB filtering. New GraphQL parameter `nativeFilter` 
is added to the selected entity lookup methods, with options `NEVER` (old filtering is forced), `ALWAYS` (DB filtering is forced), `IF_POSSIBLE` (if the requested filter is supported by a DB, DB filtering is used, otherwise filtering is fallen back to the old filter mechanism). 
Please note that not all the currently existing filters are supported by the DB.

icon:plus[] GraphQL: A simplified, native filtering friendly version of `regex` string operation, `like`, has been added, accepting wildcards `%` as a zeroable set of characters, e.g. `like: "hello%world"` requests filtering in the strings, that start with `hello`, end with `world` and have zero-to-unlimited number of any characters in between.

icon:plus[] GraphQL: Added new filters for field types: list, micronode, (s3)binary. Added a new experimental filter for referencedBy nodes.

icon:plus[] OrientDB: Basic experimental support for OrientDB native filtering/sorting is added. The GraphQL Mesh options has a new preference `nativeQueryFiltering` with options: `NEVER` (old filtering, default value), `ALWAYS` (DB filtering is forced), 
`ON_DEMAND` (GraphQL parameter `nativeFilter` is considered).

