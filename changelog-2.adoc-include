////
Note: this file (changelog-2.adoc-include) is generated automatically.
Do not make manual changes in this file, as they will be lost.

If you want to add changelog entries, create a new file in changelog/src/changelog/entries/... and run creation of the changelog with
mvn -pl changelog install
////

[[v2.1.0-SNAPSHOT]]
== 2.1.0-SNAPSHOT (25.07.2023)

NOTE: Please note that something changed.


CAUTION: Please be aware that you need to do something.


icon:bullhorn[] This is a major new feature.


icon:plus[] This is some minor enhancement.


icon:check[] This is a small bugfix.


[[v2.0.1]]
== 2.0.1 (13.07.2023)

icon:check[] Clustering: Due to an incorrect check, it was possible that migration jobs could complete without actually migrating anything, when run in a clustered environment with disabled coordination mode.

[[v2.0.0]]
== 2.0.0 (29.06.2023)

icon:plus[] Core: Support of database level filtering/sorting has been added to the low level Java API.

icon:plus[] GraphQL: Support of database level filtering/sorting has been added. New `sort` parameter in added for structured sorting, forcing the usage of DB filtering. New GraphQL parameter `nativeFilter` 
is added to the selected entity lookup methods, with options `NEVER` (old filtering is forced), `ALWAYS` (DB filtering is forced), `IF_POSSIBLE` (if the requested filter is supported by a DB, DB filtering is used, otherwise filtering is fallen back to the old filter mechanism). 
Please note that not all the currently existing filters are supported by the DB.

icon:plus[] GraphQL: A simplified, native filtering friendly version of `regex` string operation, `like`, has been added, accepting wildcards `%` as a zeroable set of characters, e.g. `like: "hello%world"` requests filtering in the strings, that start with `hello`, end with `world` and have zero-to-unlimited number of any characters in between.

icon:plus[] GraphQL: Added new filters for field types: list, micronode, (s3)binary. Added a new experimental filter for referencedBy nodes.

icon:plus[] OrientDB: Basic experimental support for OrientDB native filtering/sorting is added. The GraphQL Mesh options has a new preference `nativeQueryFiltering` with options: `NEVER` (old filtering, default value), `ALWAYS` (DB filtering is forced), 
`ON_DEMAND` (GraphQL parameter `nativeFilter` is considered).

