// The GIT repository for this pipeline lib is defined in the global Jenkins setting
@Library('jenkins-pipeline-library')
import com.gentics.*

// Make the helpers aware of this jobs environment
JobContext.set(this)


final def gitCommitTag         = '[Jenkins | ' + env.JOB_BASE_NAME + ']';
final def splits = 20;
final def runs = 20;
final def registryHostStaging	   = "gtx-docker-releases-staging-mesh.docker.apa-it.at";
final def registryHostTest	   = "gtx-docker-releases-test-system.docker.apa-it.at";

def registryHost = registryHostStaging;
final def dockerImageName = buildEnvironmentDockerImage("build/Dockerfile", "build-worker-java17")


pipeline {
    agent {
        kubernetes {
            label env.BUILD_TAG.take(63)
            defaultContainer 'build'
            yaml ocpWorker("""
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: build
    image: """ + dockerImageName + """
    resources:
      limits:
        cpu: 4
        memory: 4Gi
      requests:
        cpu: 4
        memory: 4Gi
    env:
      - name: HOME
        value: /home/jenkins
      - name: DOCKER_HOST
        value: tcp://127.0.0.1:2375
      - name: MAVEN_OPTS
        value: "-Xmx1g -XX:MaxMetaspaceSize=128m"
      - name: TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE
        value: /run/user/1000/docker.sock

  - name: docker
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 1
        memory: 1Gi
""")
            }
        }

    parameters {
      booleanParam(name: 'runTests',            defaultValue: true,  description: "Whether to run the unit tests")
      booleanParam(name: 'splitTests',          defaultValue: true,  description: "Whether to split tests or not")
      booleanParam(name: 'skipSearchTests',     defaultValue: false, description: "Whether to skip search tests or not")
      booleanParam(name: 'runSonar',            defaultValue: false, description: "Whether to run the sonarqube checks")
      booleanParam(name: 'runUnstableTests',    defaultValue: true,  description: "Whether to run tests in failing group.")
      booleanParam(name: 'runPerformanceTests', defaultValue: false, description: "Whether to run performance tests.")
      booleanParam(name: 'runClusterTests',     defaultValue: false, description: "Whether to run cluster tests.")
      booleanParam(name: 'runDeploy',           defaultValue: false, description: "Whether to run the deploy steps.")
      booleanParam(name: 'runDeployTesting',    defaultValue: false, description: "Whether to run the testing deploy steps.")
      booleanParam(name: 'runDocker',           defaultValue: false, description: "Whether to run the docker steps.")
      booleanParam(name: 'runMavenBuild',       defaultValue: false, description: "Whether to run the maven build steps.")
      booleanParam(name: 'runIntegrationTests', defaultValue: false, description: "Whether to run integration tests.")
      booleanParam(name: 'runMavenDeploy',      defaultValue: false, description: "Whether to deploy the maven artifact during the maven build step.")
      string(name: 'testingVersion',      defaultValue: "",    description: "Version for testing")
    }

    options {
        withCredentials([
            usernamePassword(credentialsId: 'repo.gentics.com', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword'),
            usernamePassword(credentialsId: 'gentics.gpg', usernameVariable: 'gpgKeyName', passwordVariable: 'gpgKeyPass'),
        ])
        timestamps()
        timeout(time: 1, unit: 'HOURS')
        gitLabConnection('git.gentics.com')
        gitlabBuilds(builds: ['Jenkins build'])
        ansiColor('xterm')
    }

    environment {
        DOCKER_TAG = "${env.GIT_BRANCH}"
        GITLAB_WEBHOOK_SECRETTOKEN = credentials('gitlab-webhook-secrettoken')
    }

    triggers {
        gitlab(
            triggerOnPush: true,
            triggerOnMergeRequest: true,
            triggerOpenMergeRequestOnPush: 'source',
            triggerOnNoteRequest: true,
            noteRegex: 'Jenkins please retry a build',
            ciSkip: true,
            skipWorkInProgressMergeRequest: true,
            addNoteOnMergeRequest: true,
            setBuildDescription: true,
            branchFilterType: 'All',
            secretToken: env.GITLAB_WEBHOOK_SECRETTOKEN)
    }

    stages {

          stage("Setup Build Environment") {
            steps {
              script {
                  echo "Setup of GPG"
                  sh "gpg --no-tty --batch --import /home/jenkins/.gpg-keys/gpg-public-key.asc"
                  sh "gpg --no-tty --batch --import /home/jenkins/.gpg-keys/gpg-secret-key.asc"
              }

              script {
                  currentBuild.description = env.GIT_COMMIT + "\n" + GitHelper.getLastCommitMessage().readLines()[0]
              }

              updateGitlabCommitStatus name: 'Jenkins build', state: "running"

            }
          }
          stage("Maven Build") {
              when {
                  expression {
                      return params.runMavenBuild
                  }
              }
              steps {
                  script {
                      sshagent(["git"]) {
                          if (Boolean.valueOf(params.runDeploy) || Boolean.valueOf(params.runMavenDeploy)) {
                              withCredentials([usernamePassword(credentialsId: 'repo.gentics.com', usernameVariable: 'repoUsername', passwordVariable: 'repoPassword'),usernamePassword(credentialsId: 'gentics.gpg', usernameVariable: 'gpgKeyName', passwordVariable: 'gpgKeyPass')]) {
                                  sh "mvn -U -B -DskipTests -Dgpg.skip=false clean deploy"
                              }
                          } else {
                              sh "mvn -B -DskipTests clean package"
                          }
                      }
                  }
              }
          }

    }
  
}